- Opciones de las Images 

FROM: Define la imagen base para construir el contenedor.
Ejemplo: FROM ubuntu:latest

RUN: Ejecuta comandos durante la creación de la imagen y crea nuevas capas en ella.
Ejemplo: RUN apt-get update -y && apt-get install -y nginx

WORKDIR: Establece el directorio de trabajo dentro del contenedor. Todos los comandos posteriores se ejecutarán desde aquí.
Ejemplo: WORKDIR /app

COPY: Copia archivos o carpetas desde el sistema del host hacia el contenedor.
Ejemplo: COPY myapp /usr/share/nginx/html

ADD: Similar a COPY, pero permite descargar archivos desde URLs y extraer archivos comprimidos .tar automáticamente.
Ejemplo: ADD https://example.com/app.tar.gz /app

ENV: Configura variables de entorno en el contenedor.
Ejemplo: ENV APP_ENV=production

EXPOSE: Declara un puerto que el contenedor usará, útil para el mapeo al ejecutar el contenedor.
Ejemplo: EXPOSE 80

CMD: Especifica el comando por defecto que se ejecutará al iniciar el contenedor.
Ejemplo: CMD ["nginx", "-g", "daemon off;"]

ENTRYPOINT: Define un comando que siempre se ejecutará en el contenedor. Puede combinarse con CMD para establecer argumentos.
Ejemplo: ENTRYPOINT ["nginx"]

LABEL: Agrega metadatos a la imagen, como información de versión o del autor.
Ejemplo: LABEL version="1.0" description="My App"

ARG: Define variables que estarán disponibles solo durante la construcción de la imagen (no en el contenedor en ejecución).
Ejemplo: ARG VERSION=1.0


- Eliminar todos los contenedores WARNING
docker rm -f $(docker ps -aq)

- Eliminar todas las images WARNING
docker rmi -f $(docker images -q)

- Eliminar todos los volumenes

docker volume rm $(docker volume ls -q) | Lista todos los nombres de los volúmenes - Elimina cada volumen listado.

docker volume prune -f

- 